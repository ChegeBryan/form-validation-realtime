{"version":3,"sources":["script.js"],"names":[],"mappings":";;;;;;IAAM,gB;AACJ,4BAAa,KAAb,EAAqB;AAAA;;AACnB,SAAK,YAAL,GAAoB,EAApB;AACA,SAAK,cAAL,GAAsB,EAAtB;;AAEA;;;;;;AAMA,SAAK,SAAL,GAAiB,KAAjB;;AAEA;AACA,SAAK,gBAAL;AACD;;;;kCAEc,O,EAAU;AACvB,WAAK,YAAL,CAAkB,IAAlB,CAAwB,OAAxB;AACD;;;sCAEiB;AAChB,aAAO,KAAK,YAAL,CAAkB,IAAlB,CAAwB,MAAxB,CAAP;AACD;;;kCAEc,K,EAAQ;AACrB,WAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,KAAK,cAAL,CAAoB,MAAzC,EAAiD,GAAjD,EAAuD;;AAErD,YAAM,YAAY,KAAK,cAAL,CAAoB,CAApB,EAAuB,SAAvB,CAAkC,KAAlC,CAAlB;AACA,YAAK,SAAL,EAAiB;AACf,eAAK,aAAL,CAAoB,KAAK,cAAL,CAAoB,CAApB,EAAuB,iBAA3C;AACD;;AAED,YAAM,qBAAqB,KAAK,cAAL,CAAoB,CAApB,EAAuB,OAAlD;;AAEA,YAAK,kBAAL,EAA0B;AACxB,cAAK,SAAL,EAAiB;AACf,+BAAmB,SAAnB,CAA6B,GAA7B,CAAkC,SAAlC;AACA,+BAAmB,SAAnB,CAA6B,MAA7B,CAAqC,OAArC;AACD,WAHD,MAGO;AACL,+BAAmB,SAAnB,CAA6B,MAA7B,CAAqC,SAArC;AACA,+BAAmB,SAAnB,CAA6B,GAA7B,CAAkC,OAAlC;AACD;AAEF,SAlBoD,CAkBnD;AACH,OApBoB,CAoBnB;AACH;;;iCAEY;AACX;;AAEA,WAAK,SAAL,CAAe,gBAAf,CAAgC,YAAhC,GAA+C,EAA/C;AACA,WAAK,aAAL,CAAoB,KAAK,SAAzB;;AAEA,UAAK,KAAK,SAAL,CAAe,gBAAf,CAAgC,YAAhC,CAA6C,MAA7C,KAAwD,CAAxD,IAA6D,KAAK,SAAL,CAAe,KAAf,KAAyB,EAA3F,EAAgG;AAC9F,aAAK,SAAL,CAAe,iBAAf,CAAkC,EAAlC;AACD,OAFD,MAEO;AACL,YAAM,UAAU,KAAK,SAAL,CAAe,gBAAf,CAAgC,eAAhC,EAAhB;AACA,aAAK,SAAL,CAAe,iBAAf,CAAkC,OAAlC;AACD;AACF;;;uCAEkB;AACjB;;AAEA,UAAI,mBAAmB,IAAvB;;AAEA,WAAK,SAAL,CAAe,gBAAf,CAAiC,OAAjC,EAA0C,YAAM;AAC9C,yBAAiB,UAAjB;AACD,OAFD,EAEG,KAFH;AAGD;;;;;;AAGH;;;;;;;;;;AAUA,IAAM,yBAAyB,CAC7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,MAAM,KAAN,CAAY,MAAZ,GAAqB,CAA5B;AACD,GAHH;;AAIE,qBAAmB,8CAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CAD6B,EAQ7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,QAAM,oBAAoB,MAAM,KAAN,CAAY,KAAZ,CAAmB,eAAnB,CAA1B;AACA,WAAO,oBAAoB,IAApB,GAA2B,KAAlC;AACD,GAJH;;AAKE,qBAAmB,sCALrB;AAME,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AANX,CAR6B,CAA/B;;AAkBA,IAAM,yBAAyB,CAC7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,MAAM,KAAN,CAAY,MAAZ,GAAqB,CAArB,GAAyB,MAAM,KAAN,CAAY,MAAZ,GAAqB,GAArD;AACD,GAHH;;AAIE,qBAAmB,qDAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CAD6B,EAQ7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,CAAC,MAAM,KAAN,CAAY,KAAZ,CAAmB,QAAnB,CAAR;AACD,GAHH;;AAIE,qBAAmB,+BAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CAR6B,EAe7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,CAAC,MAAM,KAAN,CAAY,KAAZ,CAAmB,QAAnB,CAAR;AACD,GAHH;;AAIE,qBAAmB,yCAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CAf6B,EAsB7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,CAAC,MAAM,KAAN,CAAY,KAAZ,CAAmB,QAAnB,CAAR;AACD,GAHH;;AAIE,qBAAmB,yCAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CAtB6B,EA6B7B;AACE,WADF,qBACa,KADb,EACqB;AACjB,WAAO,CAAC,MAAM,KAAN,CAAY,KAAZ,CAAmB,qBAAnB,CAAR;AACD,GAHH;;AAIE,qBAAmB,iDAJrB;AAKE,WAAS,SAAS,aAAT,CAAwB,6DAAxB;AALX,CA7B6B,CAA/B;;AAsCA,IAAM,+BAA+B,CAAC;AACpC,WADoC,uBACxB;AACV,WAAO,oBAAoB,KAApB,IAA6B,cAAc,KAAlD;AACD,GAHmC;;AAIpC,qBAAmB;AAJiB,CAAD,CAArC;;AAQA;;;;;;;;;AASA,IAAM,gBAAgB,SAAS,cAAT,CAAyB,UAAzB,CAAtB;AACA,IAAI,gBAAgB,SAAS,cAAT,CAAyB,UAAzB,CAApB;AACA,IAAI,sBAAsB,SAAS,cAAT,CAAyB,iBAAzB,CAA1B;;AAEA,cAAc,gBAAd,GAAiC,IAAI,gBAAJ,CAAsB,aAAtB,CAAjC;AACA,cAAc,gBAAd,CAA+B,cAA/B,GAAgD,sBAAhD;;AAEA,cAAc,gBAAd,GAAiC,IAAI,gBAAJ,CAAsB,aAAtB,CAAjC;AACA,cAAc,gBAAd,CAA+B,cAA/B,GAAgD,sBAAhD;;AAEA,oBAAoB,gBAApB,GAAuC,IAAI,gBAAJ,CAAsB,mBAAtB,CAAvC;AACA,oBAAoB,gBAApB,CAAqC,cAArC,GAAsD,4BAAtD;;AAGA;;;;AAIA,IAAM,SAAS,SAAS,gBAAT,CAA2B,8BAA3B,CAAf;;AAGA,IAAM,SAAS,SAAS,aAAT,CAAwB,sBAAxB,CAAf;AACA,IAAM,OAAO,SAAS,cAAT,CAAyB,cAAzB,CAAb;;AAEA,SAAS,QAAT,GAAoB;AAClB,OAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,OAAO,MAA5B,EAAoC,GAApC,EAA0C;AACxC,WAAO,CAAP,EAAU,gBAAV,CAA2B,UAA3B;AACD;AACF;;AAED,OAAO,gBAAP,CAAyB,OAAzB,EAAkC,QAAlC,EAA4C,KAA5C;;AAEA,KAAK,gBAAL,CAAuB,QAAvB,EAAiC,aAAK;AACpC;AACA,IAAE,cAAF;AACD,CAHD,EAGG,KAHH","file":"script.js","sourcesContent":["class CustomValidation {\r\n  constructor( input ) {\r\n    this.invalidities = [];\r\n    this.validityChecks = [];\r\n\r\n    /* Add reference to the input node.\r\n      Note that the CustomValidation object cannot be executed without an input\r\n      argument value for the constructor.\r\n      i.e `new CustomValidation()` throws an error, but `new CustomValidation( @element )`\r\n      works fine.\r\n    */\r\n    this.inputNode = input;\r\n\r\n    // Trigger method to attach the listener.\r\n    this.registerListener();\r\n  }\r\n\r\n  addInvalidity( message ) {\r\n    this.invalidities.push( message );\r\n  }\r\n\r\n  getInvalidities() {\r\n    return this.invalidities.join( '. \\n' );\r\n  }\r\n\r\n  checkValidity( input ) {\r\n    for ( let i = 0; i < this.validityChecks.length; i++ ) {\r\n\r\n      const isInvalid = this.validityChecks[i].isInvalid( input );\r\n      if ( isInvalid ) {\r\n        this.addInvalidity( this.validityChecks[i].invalidityMessage );\r\n      }\r\n\r\n      const requirementElement = this.validityChecks[i].element;\r\n\r\n      if ( requirementElement ) {\r\n        if ( isInvalid ) {\r\n          requirementElement.classList.add( 'invalid' );\r\n          requirementElement.classList.remove( 'valid' );\r\n        } else {\r\n          requirementElement.classList.remove( 'invalid' );\r\n          requirementElement.classList.add( 'valid' );\r\n        }\r\n\r\n      } // End if requirementElement.\r\n    } // End for\r\n  }\r\n\r\n  checkInput() {\r\n    // checkInput() now encapsulated.\r\n\r\n    this.inputNode.CustomValidation.invalidities = [];\r\n    this.checkValidity( this.inputNode );\r\n\r\n    if ( this.inputNode.CustomValidation.invalidities.length === 0 && this.inputNode.value !== '' ) {\r\n      this.inputNode.setCustomValidity( '' );\r\n    } else {\r\n      const message = this.inputNode.CustomValidation.getInvalidities();\r\n      this.inputNode.setCustomValidity( message );\r\n    }\r\n  }\r\n\r\n  registerListener() {\r\n    // Register the listener here.\r\n\r\n    var CustomValidation = this;\r\n\r\n    this.inputNode.addEventListener( 'keyup', () => {\r\n      CustomValidation.checkInput();\r\n    }, false);\r\n  }\r\n}\r\n\r\n/* ----------------------------\r\n  Validity Checks\r\n\r\n  The arrays of validity checks for each input\r\n  Comprised of three things:\r\n  1. isInvalid() - the function to determine if the input fulfills a particular requirement.\r\n  2. invalidityMessage - the error message to display if the field is invalid.\r\n  3. element - The element that states the requirement.\r\n---------------------------- */\r\n\r\nconst usernameValidityChecks = [\r\n  {\r\n    isInvalid( input ) {\r\n      return input.value.length < 3;\r\n    },\r\n    invalidityMessage: 'This input needs to be at least 3 characters',\r\n    element: document.querySelector( 'label[for=\"username\"] .input-requirements li:nth-child( 1 )' )\r\n  },\r\n  {\r\n    isInvalid( input ) {\r\n      const illegalCharacters = input.value.match( /[^a-zA-Z0-9]/g );\r\n      return illegalCharacters ? true : false;\r\n    },\r\n    invalidityMessage: 'Only letters and numbers are allowed',\r\n    element: document.querySelector( 'label[for=\"username\"] .input-requirements li:nth-child( 2 )' )\r\n  }\r\n];\r\n\r\nconst passwordValidityChecks = [\r\n  {\r\n    isInvalid( input ) {\r\n      return input.value.length < 8 | input.value.length > 100;\r\n    },\r\n    invalidityMessage: 'This input needs to be between 8 and 100 characters',\r\n    element: document.querySelector( 'label[for=\"password\"] .input-requirements li:nth-child( 1 )' )\r\n  },\r\n  {\r\n    isInvalid( input ) {\r\n      return !input.value.match( /[0-9]/g );\r\n    },\r\n    invalidityMessage: 'At least 1 number is required',\r\n    element: document.querySelector( 'label[for=\"password\"] .input-requirements li:nth-child( 2 )' )\r\n  },\r\n  {\r\n    isInvalid( input ) {\r\n      return !input.value.match( /[a-z]/g );\r\n    },\r\n    invalidityMessage: 'At least 1 lowercase letter is required',\r\n    element: document.querySelector( 'label[for=\"password\"] .input-requirements li:nth-child( 3 )' )\r\n  },\r\n  {\r\n    isInvalid( input ) {\r\n      return !input.value.match( /[A-Z]/g );\r\n    },\r\n    invalidityMessage: 'At least 1 uppercase letter is required',\r\n    element: document.querySelector( 'label[for=\"password\"] .input-requirements li:nth-child( 4 )' )\r\n  },\r\n  {\r\n    isInvalid( input ) {\r\n      return !input.value.match( /[\\!\\@\\#\\$\\%\\^\\&\\*]/g );\r\n    },\r\n    invalidityMessage: 'You need one of the required special characters',\r\n    element: document.querySelector( 'label[for=\"password\"] .input-requirements li:nth-child( 5 )' )\r\n  }\r\n];\r\n\r\nconst passwordRepeatValidityChecks = [{\r\n  isInvalid() {\r\n    return passwordRepeatInput.value != passwordInput.value;\r\n  },\r\n  invalidityMessage: 'This password needs to match the first one'\r\n}];\r\n\r\n\r\n/* ----------------------------\r\n\r\n  Setup CustomValidation\r\n\r\n  Setup the CustomValidation prototype for each input\r\n  Also sets which array of validity checks to use for that input\r\n\r\n---------------------------- */\r\n\r\nconst usernameInput = document.getElementById( 'username' );\r\nvar passwordInput = document.getElementById( 'password' );\r\nvar passwordRepeatInput = document.getElementById( 'password_repeat' );\r\n\r\nusernameInput.CustomValidation = new CustomValidation( usernameInput );\r\nusernameInput.CustomValidation.validityChecks = usernameValidityChecks;\r\n\r\npasswordInput.CustomValidation = new CustomValidation( passwordInput );\r\npasswordInput.CustomValidation.validityChecks = passwordValidityChecks;\r\n\r\npasswordRepeatInput.CustomValidation = new CustomValidation( passwordRepeatInput );\r\npasswordRepeatInput.CustomValidation.validityChecks = passwordRepeatValidityChecks;\r\n\r\n\r\n/* ----------------------------\r\n  Event Listeners\r\n---------------------------- */\r\n\r\nconst inputs = document.querySelectorAll( 'input:not( [type=\"submit\"] )' );\r\n\r\n\r\nconst submit = document.querySelector( 'input[type=\"submit\"]' );\r\nconst form = document.getElementById( 'registration' );\r\n\r\nfunction validate() {\r\n  for ( let i = 0; i < inputs.length; i++ ) {\r\n    inputs[i].CustomValidation.checkInput();\r\n  }\r\n}\r\n\r\nsubmit.addEventListener( 'click', validate, false );\r\n\r\nform.addEventListener( 'submit', e => {\r\n  validate();\r\n  e.preventDefault();\r\n}, false);\r\n"],"sourceRoot":"/source/"}